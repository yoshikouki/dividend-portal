---
http_interactions:
- request:
    method: get
    uri: https://financialmodelingprep.com/api/v3/stock_dividend_calendar?apikey=<FMP_API_KEY>&from=2021-09-02
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - financialmodelingprep.com
      Upgrade-Insecure-Requests:
      - '1'
  response:
    status:
      code: 200
      message: ''
    headers:
      Server:
      - nginx/1.14.0 (Ubuntu)
      Date:
      - Thu, 02 Sep 2021 15:09:46 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, OPTIONS
      Access-Control-Max-Age:
      - '3600'
      Access-Control-Allow-Headers:
      - origin, content-type, accept, Authorization, authorization
    body:
      encoding: ASCII-8BIT
      string: |-
        [ {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.12,
          "symbol" : "RPT",
          "dividend" : 0.12,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.16,
          "symbol" : "FGBI",
          "dividend" : 0.16,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.6,
          "symbol" : "DTM",
          "dividend" : 0.6,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-06"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.825,
          "symbol" : "DTE",
          "dividend" : 0.825,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-06-24"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.633,
          "symbol" : "JJSF",
          "dividend" : 0.633,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-11",
          "declarationDate" : "2021-08-06"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.26,
          "symbol" : "CJT.TO",
          "dividend" : 0.26,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.355,
          "symbol" : "WHF",
          "dividend" : 0.355,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.28,
          "symbol" : "SYBT",
          "dividend" : 0.28,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.5,
          "symbol" : "MRTN",
          "dividend" : 0.5,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.1,
          "symbol" : "NEO.TO",
          "dividend" : 0.1,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.3325,
          "symbol" : "NJR",
          "dividend" : 0.3325,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-14"
        }, {
          "date" : "2021-09-17",
          "label" : "September 17, 21",
          "adjDividend" : 0.9,
          "symbol" : "NEWT",
          "dividend" : 0.9,
          "recordDate" : "2021-09-20",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.2125,
          "symbol" : "AVNT",
          "dividend" : 0.2125,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-07",
          "declarationDate" : "2021-07-14"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.15,
          "symbol" : "ARD",
          "dividend" : 0.15,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.08,
          "symbol" : "AIMC",
          "dividend" : 0.08,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.18,
          "symbol" : "ALEX",
          "dividend" : 0.18,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.16,
          "symbol" : "ALRS",
          "dividend" : 0.16,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-07-26"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.055,
          "symbol" : "TPB",
          "dividend" : 0.055,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.39,
          "symbol" : "ALB",
          "dividend" : 0.39,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 1.0,
          "symbol" : "AAP",
          "dividend" : 1,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.46,
          "symbol" : "GEF",
          "dividend" : 0.46,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-31"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.12,
          "symbol" : "TG",
          "dividend" : 0.12,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.15,
          "symbol" : "SHOO",
          "dividend" : 0.15,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.308,
          "symbol" : "RBCAA",
          "dividend" : 0.308,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.11,
          "symbol" : "ROIC",
          "dividend" : 0.11,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.06,
          "symbol" : "QCRH",
          "dividend" : 0.06,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.15,
          "symbol" : "HBAN",
          "dividend" : 0.15,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-23"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.1,
          "symbol" : "HRZN",
          "dividend" : 0.1,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.1,
          "symbol" : "VRS",
          "dividend" : 0.1,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-06"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.24,
          "symbol" : "HRC",
          "dividend" : 0.24,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-08"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.15,
          "symbol" : "UNIT",
          "dividend" : 0.15,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.27,
          "symbol" : "FISI",
          "dividend" : 0.27,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.25,
          "symbol" : "EXP",
          "dividend" : 0.25,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 1.0,
          "symbol" : "CSU.TO",
          "dividend" : 1,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.31,
          "symbol" : "CHMG",
          "dividend" : 0.31,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-16",
          "label" : "September 16, 21",
          "adjDividend" : 0.47,
          "symbol" : "CNQ.TO",
          "dividend" : 0.47,
          "recordDate" : "2021-09-17",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.2,
          "symbol" : "OLED",
          "dividend" : 0.2,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.47,
          "symbol" : "SYY",
          "dividend" : 0.47,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.632,
          "symbol" : "MCY",
          "dividend" : 0.632,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.28,
          "symbol" : "MPW",
          "dividend" : 0.28,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-10-14",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.105,
          "symbol" : "MAL.TO",
          "dividend" : 0.105,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-06"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.17,
          "symbol" : "ITP.TO",
          "dividend" : 0.17,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.1,
          "symbol" : "XTC.TO",
          "dividend" : 0.1,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.12,
          "symbol" : "ESSA",
          "dividend" : 0.12,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.63,
          "symbol" : "CINF",
          "dividend" : 0.63,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.035,
          "symbol" : "ADT",
          "dividend" : 0.035,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.21,
          "symbol" : "CCL_B.TO",
          "dividend" : 0.21,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.159,
          "symbol" : "OPP",
          "dividend" : 0.159,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.3,
          "symbol" : "TCPC",
          "dividend" : 0.3,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.47,
          "symbol" : "ARES",
          "dividend" : 0.47,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.32,
          "symbol" : "AIG",
          "dividend" : 0.32,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.092,
          "symbol" : "RMI",
          "dividend" : 0.092,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.025,
          "symbol" : "AGI.TO",
          "dividend" : 0.025,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.1,
          "symbol" : "RFMZ",
          "dividend" : 0.1,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.092,
          "symbol" : "RMM",
          "dividend" : 0.092,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.152,
          "symbol" : "RSF",
          "dividend" : 0.152,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.17,
          "symbol" : "RIV",
          "dividend" : 0.17,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-21"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.104,
          "symbol" : "RFM",
          "dividend" : 0.104,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.085,
          "symbol" : "PGZ",
          "dividend" : 0.085,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.068,
          "symbol" : "OXLC",
          "dividend" : 0.068,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-04-29"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.125,
          "symbol" : "MEOH",
          "dividend" : 0.125,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-15"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.12,
          "symbol" : "GDL",
          "dividend" : 0.12,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.03,
          "symbol" : "GNT",
          "dividend" : 0.03,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-05-13"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.05,
          "symbol" : "GUT",
          "dividend" : 0.05,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-05-13"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.15,
          "symbol" : "GRX",
          "dividend" : 0.15,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.16,
          "symbol" : "GGZ",
          "dividend" : 0.16,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.11,
          "symbol" : "GDV",
          "dividend" : 0.11,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-05-13"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.15,
          "symbol" : "GAB",
          "dividend" : 0.15,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.3,
          "symbol" : "FNV",
          "dividend" : 0.3,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.025,
          "symbol" : "AGI",
          "dividend" : 0.025,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.035,
          "symbol" : "OXSQ",
          "dividend" : 0.035,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-04-27"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.3,
          "symbol" : "NMFC",
          "dividend" : 0.3,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.125,
          "symbol" : "MX.TO",
          "dividend" : 0.125,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-16"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.33,
          "symbol" : "ICE",
          "dividend" : 0.33,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.024,
          "symbol" : "GWRS",
          "dividend" : 0.024,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-31"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.08,
          "symbol" : "NX",
          "dividend" : 0.08,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.27,
          "symbol" : "RYN",
          "dividend" : 0.27,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-26"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.215,
          "symbol" : "HI",
          "dividend" : 0.215,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.48,
          "symbol" : "HCA",
          "dividend" : 0.48,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.3,
          "symbol" : "FNV.TO",
          "dividend" : 0.3,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.15,
          "symbol" : "FFIN",
          "dividend" : 0.15,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.26,
          "symbol" : "FCAP",
          "dividend" : 0.26,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.4,
          "symbol" : "FNF",
          "dividend" : 0.4,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.22,
          "symbol" : "RNST",
          "dividend" : 0.22,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.15,
          "symbol" : "VST",
          "dividend" : 0.15,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.235,
          "symbol" : "WU",
          "dividend" : 0.235,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.285,
          "symbol" : "UTMD",
          "dividend" : 0.285,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-15",
          "label" : "September 15, 21",
          "adjDividend" : 0.1,
          "symbol" : "AAN",
          "dividend" : 0.1,
          "recordDate" : "2021-09-16",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.35,
          "symbol" : "HLNE",
          "dividend" : 0.35,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.71,
          "symbol" : "GILD",
          "dividend" : 0.71,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.67,
          "symbol" : "GRMN",
          "dividend" : 0.67,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-02-17"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.6,
          "symbol" : "WN.TO",
          "dividend" : 0.6,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.01,
          "symbol" : "GORO",
          "dividend" : 0.01,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.188,
          "symbol" : "HUN",
          "dividend" : 0.188,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.3,
          "symbol" : "IBP",
          "dividend" : 0.3,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.65,
          "symbol" : "MRK",
          "dividend" : 0.65,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-07",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.15,
          "symbol" : "MRC.TO",
          "dividend" : 0.15,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.71,
          "symbol" : "MSI",
          "dividend" : 0.71,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.41,
          "symbol" : "NSA",
          "dividend" : 0.41,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.32,
          "symbol" : "NEN",
          "dividend" : 0.32,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 2.1,
          "symbol" : "NEU",
          "dividend" : 2.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "NWSA",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-13",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.475,
          "symbol" : "NREF",
          "dividend" : 0.475,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.341,
          "symbol" : "NXRT",
          "dividend" : 0.341,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.62,
          "symbol" : "NWE",
          "dividend" : 0.62,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.563,
          "symbol" : "NXPI",
          "dividend" : 0.563,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.145,
          "symbol" : "OCSL",
          "dividend" : 0.145,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.5,
          "symbol" : "ORI",
          "dividend" : 1.5,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.14,
          "symbol" : "OVV",
          "dividend" : 0.14,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.002,
          "symbol" : "OMI",
          "dividend" : 0.002,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.0,
          "symbol" : "PKG",
          "dividend" : 1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.125,
          "symbol" : "PXT.TO",
          "dividend" : 0.125,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-07"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.05,
          "symbol" : "PSI.TO",
          "dividend" : 0.05,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.175,
          "symbol" : "APTS",
          "dividend" : 0.175,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.49,
          "symbol" : "PB",
          "dividend" : 0.49,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.05,
          "symbol" : "PSB",
          "dividend" : 1.05,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 2.0,
          "symbol" : "PSA",
          "dividend" : 2,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.595,
          "symbol" : "REG",
          "dividend" : 0.595,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.36,
          "symbol" : "RNR",
          "dividend" : 0.36,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.13,
          "symbol" : "SBCF",
          "dividend" : 0.13,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.23,
          "symbol" : "SCI",
          "dividend" : 0.23,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.15,
          "symbol" : "SFL",
          "dividend" : 0.15,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.09875,
          "symbol" : "SJR_B.TO",
          "dividend" : 0.09875,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.18,
          "symbol" : "SFNC",
          "dividend" : 0.18,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.41,
          "symbol" : "TSLX",
          "dividend" : 0.41,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.12,
          "symbol" : "SAH",
          "dividend" : 0.12,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "STFC",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.18,
          "symbol" : "SMMF",
          "dividend" : 0.18,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.08,
          "symbol" : "TROW",
          "dividend" : 1.08,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.05,
          "symbol" : "TECK_B.TO",
          "dividend" : 0.05,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.175,
          "symbol" : "TDS",
          "dividend" : 0.175,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.42,
          "symbol" : "LEG",
          "dividend" : 0.42,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.11,
          "symbol" : "KBR",
          "dividend" : 0.11,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.618,
          "symbol" : "IRM",
          "dividend" : 0.618,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.25,
          "symbol" : "IPAR",
          "dividend" : 0.25,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.83,
          "symbol" : "IFC.TO",
          "dividend" : 0.83,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.345,
          "symbol" : "UGI",
          "dividend" : 0.345,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.3,
          "symbol" : "TNL",
          "dividend" : 0.3,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.54,
          "symbol" : "CSWC",
          "dividend" : 0.54,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.48,
          "symbol" : "CPK",
          "dividend" : 0.48,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.42,
          "symbol" : "KO",
          "dividend" : 0.42,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-14"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.68,
          "symbol" : "CMA",
          "dividend" : 0.68,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.07833,
          "symbol" : "RNW.TO",
          "dividend" : 0.07833,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-04-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.21,
          "symbol" : "TPZ.TO",
          "dividend" : 0.21,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.26,
          "symbol" : "TMO",
          "dividend" : 0.26,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-07-08"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.95,
          "symbol" : "ATRI",
          "dividend" : 1.95,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-31"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.24,
          "symbol" : "VIACA",
          "dividend" : 0.24,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.04,
          "symbol" : "TECK",
          "dividend" : 0.04,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.079,
          "symbol" : "SJR",
          "dividend" : 0.079,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "NWS",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-13",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.085,
          "symbol" : "MMD",
          "dividend" : 0.085,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-01"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.08,
          "symbol" : "GTN.A",
          "dividend" : 0.08,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.35,
          "symbol" : "DPG",
          "dividend" : 0.35,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-09"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.002,
          "symbol" : "CPG",
          "dividend" : 0.002,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.08,
          "symbol" : "RQI",
          "dividend" : 0.08,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.155,
          "symbol" : "UTF",
          "dividend" : 0.155,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.124,
          "symbol" : "RNP",
          "dividend" : 0.124,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.13,
          "symbol" : "PTA",
          "dividend" : 0.13,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.014,
          "symbol" : "CVE",
          "dividend" : 0.014,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.157,
          "symbol" : "PSF",
          "dividend" : 0.157,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.143,
          "symbol" : "LDP",
          "dividend" : 0.143,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.087,
          "symbol" : "FOF",
          "dividend" : 0.087,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.199,
          "symbol" : "RA",
          "dividend" : 0.199,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-07-02"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.7,
          "symbol" : "BCE",
          "dividend" : 0.7,
          "recordDate" : "",
          "paymentDate" : "2021-10-15",
          "declarationDate" : null
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.24,
          "symbol" : "WH",
          "dividend" : 0.24,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.28,
          "symbol" : "WOR",
          "dividend" : 0.28,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-06-23"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.12,
          "symbol" : "WWE",
          "dividend" : 0.12,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.18,
          "symbol" : "WGO",
          "dividend" : 0.18,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.24,
          "symbol" : "VIAC",
          "dividend" : 0.24,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.29,
          "symbol" : "VRSK",
          "dividend" : 0.29,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.2,
          "symbol" : "VGR",
          "dividend" : 0.2,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.11,
          "symbol" : "VLY",
          "dividend" : 0.11,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.06,
          "symbol" : "HRTG",
          "dividend" : 0.06,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.458,
          "symbol" : "XEL",
          "dividend" : 0.458,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-20",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.2,
          "symbol" : "BXS",
          "dividend" : 0.2,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.2,
          "symbol" : "SPTN",
          "dividend" : 0.2,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.25,
          "symbol" : "COFS",
          "dividend" : 0.25,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.15,
          "symbol" : "HWBK",
          "dividend" : 0.15,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.35,
          "symbol" : "BCEI",
          "dividend" : 0.35,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.64,
          "symbol" : "BR",
          "dividend" : 0.64,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.4,
          "symbol" : "CFFI",
          "dividend" : 0.4,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.025,
          "symbol" : "NET_UN.TO",
          "dividend" : 0.025,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-05-25"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.0175,
          "symbol" : "CVE.TO",
          "dividend" : 0.0175,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.43,
          "symbol" : "CBU",
          "dividend" : 0.43,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.4,
          "symbol" : "CTBI",
          "dividend" : 0.4,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.2,
          "symbol" : "CNMD",
          "dividend" : 0.2,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.21,
          "symbol" : "CSW_A.TO",
          "dividend" : 0.21,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.06,
          "symbol" : "CJR_B.TO",
          "dividend" : 0.06,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.0025,
          "symbol" : "CPG.TO",
          "dividend" : 0.0025,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.33,
          "symbol" : "CCI",
          "dividend" : 1.33,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.25,
          "symbol" : "CSGS",
          "dividend" : 0.25,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.16,
          "symbol" : "DLR",
          "dividend" : 1.16,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.94,
          "symbol" : "DPZ",
          "dividend" : 0.94,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.07,
          "symbol" : "DRM.TO",
          "dividend" : 0.07,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.69,
          "symbol" : "EMN",
          "dividend" : 0.69,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.03,
          "symbol" : "ECN.TO",
          "dividend" : 0.03,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.3,
          "symbol" : "EVT.TO",
          "dividend" : 0.3,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.035,
          "symbol" : "ESBA",
          "dividend" : 0.035,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.035,
          "symbol" : "ESRT",
          "dividend" : 0.035,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.19,
          "symbol" : "EFSC",
          "dividend" : 0.19,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-26"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.025,
          "symbol" : "EVC",
          "dividend" : 0.025,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.37,
          "symbol" : "EQB.TO",
          "dividend" : 0.37,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 1.25,
          "symbol" : "EXR",
          "dividend" : 1.25,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.88,
          "symbol" : "AGM",
          "dividend" : 0.88,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "FCRD",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.65,
          "symbol" : "FSK",
          "dividend" : 0.65,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.5,
          "symbol" : "GATX",
          "dividend" : 0.5,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.09,
          "symbol" : "MBIN",
          "dividend" : 0.09,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.12,
          "symbol" : "MRD.TO",
          "dividend" : 0.12,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.34,
          "symbol" : "MKP.TO",
          "dividend" : 0.34,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.01,
          "symbol" : "MAXR",
          "dividend" : 0.01,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.15,
          "symbol" : "M",
          "dividend" : 0.15,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.365,
          "symbol" : "L.TO",
          "dividend" : 0.365,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.36,
          "symbol" : "LDOS",
          "dividend" : 0.36,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "GECC",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.08,
          "symbol" : "GTN",
          "dividend" : 0.08,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.075,
          "symbol" : "GPK",
          "dividend" : 0.075,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.25,
          "symbol" : "WJX.TO",
          "dividend" : 0.25,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.13,
          "symbol" : "WRB",
          "dividend" : 0.13,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.15,
          "symbol" : "UE",
          "dividend" : 0.15,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.2,
          "symbol" : "UCBI",
          "dividend" : 0.2,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.9,
          "symbol" : "MO",
          "dividend" : 0.9,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-12",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "AMH",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.41,
          "symbol" : "ARCC",
          "dividend" : 0.41,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "ARR",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.06,
          "symbol" : "BANC",
          "dividend" : 0.06,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.06,
          "symbol" : "BOCH",
          "dividend" : 0.06,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.875,
          "symbol" : "BCE.TO",
          "dividend" : 0.875,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.05,
          "symbol" : "BDC",
          "dividend" : 0.05,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.06,
          "symbol" : "BRY",
          "dividend" : 0.06,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-14",
          "label" : "September 14, 21",
          "adjDividend" : 0.1,
          "symbol" : "BKCC",
          "dividend" : 0.1,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.48,
          "symbol" : "ECL",
          "dividend" : 0.48,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.07,
          "symbol" : "EDI",
          "dividend" : 0.07,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.07,
          "symbol" : "EDF",
          "dividend" : 0.07,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.126,
          "symbol" : "EOD",
          "dividend" : 0.126,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.105,
          "symbol" : "SOI",
          "dividend" : 0.105,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.52,
          "symbol" : "SAR",
          "dividend" : 0.52,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.045,
          "symbol" : "NBLY.TO",
          "dividend" : 0.045,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-10-12",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.02,
          "symbol" : "GBL",
          "dividend" : 0.02,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.36,
          "symbol" : "FDUS",
          "dividend" : 0.36,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.6,
          "symbol" : "EVBN",
          "dividend" : 0.6,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.2,
          "symbol" : "AME",
          "dividend" : 0.2,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-06"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.7,
          "symbol" : "BBY",
          "dividend" : 0.7,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.13,
          "symbol" : "BAMR",
          "dividend" : 0.13,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 0.5,
          "symbol" : "CWH",
          "dividend" : 0.5,
          "recordDate" : "2021-09-14",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-13",
          "label" : "September 13, 21",
          "adjDividend" : 5.0,
          "symbol" : "BAP",
          "dividend" : 5,
          "recordDate" : "2021-09-15",
          "paymentDate" : "2021-10-07",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.005,
          "symbol" : "GROW",
          "dividend" : 0.005,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-06-02"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 1.45,
          "symbol" : "UNH",
          "dividend" : 1.45,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.01,
          "symbol" : "SPR",
          "dividend" : 0.01,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.54,
          "symbol" : "KSU",
          "dividend" : 0.54,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.3,
          "symbol" : "JRVR",
          "dividend" : 0.3,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.22,
          "symbol" : "ITT",
          "dividend" : 0.22,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.49,
          "symbol" : "DVN",
          "dividend" : 0.49,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.07,
          "symbol" : "RRBI",
          "dividend" : 0.07,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.55,
          "symbol" : "OCCI",
          "dividend" : 0.55,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-10-29",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.104,
          "symbol" : "TBLD",
          "dividend" : 0.104,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.08,
          "symbol" : "VGI",
          "dividend" : 0.08,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-05-20"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.08,
          "symbol" : "ZTR",
          "dividend" : 0.08,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-05-20"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.16,
          "symbol" : "CCBG",
          "dividend" : 0.16,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-10",
          "label" : "September 10, 21",
          "adjDividend" : 0.17,
          "symbol" : "CATO",
          "dividend" : 0.17,
          "recordDate" : "2021-09-13",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.25,
          "symbol" : "GPN",
          "dividend" : 0.25,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.16,
          "symbol" : "AL",
          "dividend" : 0.16,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.29,
          "symbol" : "AMSF",
          "dividend" : 0.29,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 1.13,
          "symbol" : "ANTM",
          "dividend" : 1.13,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.26,
          "symbol" : "AUBN",
          "dividend" : 0.26,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.93,
          "symbol" : "ADP",
          "dividend" : 0.93,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.01,
          "symbol" : "BSIG",
          "dividend" : 0.01,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.37,
          "symbol" : "CTXS",
          "dividend" : 0.37,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.9,
          "symbol" : "CME",
          "dividend" : 0.9,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.13,
          "symbol" : "CNO",
          "dividend" : 0.13,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.72,
          "symbol" : "CMP",
          "dividend" : 0.72,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.175,
          "symbol" : "ENS",
          "dividend" : 0.175,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.2,
          "symbol" : "EXPO",
          "dividend" : 0.2,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.0125,
          "symbol" : "QTRH.TO",
          "dividend" : 0.0125,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.07,
          "symbol" : "SNDR",
          "dividend" : 0.07,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.17,
          "symbol" : "SAMG",
          "dividend" : 0.17,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.303,
          "symbol" : "SJI",
          "dividend" : 0.303,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.65,
          "symbol" : "SR",
          "dividend" : 0.65,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.12,
          "symbol" : "STXB",
          "dividend" : 0.12,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.3162,
          "symbol" : "T.TO",
          "dividend" : 0.3162,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.02,
          "symbol" : "TXT",
          "dividend" : 0.02,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.88,
          "symbol" : "TRV",
          "dividend" : 0.88,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.37,
          "symbol" : "UMBF",
          "dividend" : 0.37,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.147,
          "symbol" : "UBCP",
          "dividend" : 0.147,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.1,
          "symbol" : "UWMC",
          "dividend" : 0.1,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-08-16"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.49,
          "symbol" : "VFC",
          "dividend" : 0.49,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.15,
          "symbol" : "VCTR",
          "dividend" : 0.15,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.095,
          "symbol" : "VSH",
          "dividend" : 0.095,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.41,
          "symbol" : "WMB",
          "dividend" : 0.41,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.1,
          "symbol" : "JOAN",
          "dividend" : 0.1,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 5.938,
          "symbol" : "DKS",
          "dividend" : 5.938,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.08,
          "symbol" : "CRWS",
          "dividend" : 0.08,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.1,
          "symbol" : "ECC",
          "dividend" : 0.1,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-05-13"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.253,
          "symbol" : "TU",
          "dividend" : 0.253,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.07,
          "symbol" : "CAL",
          "dividend" : 0.07,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.03,
          "symbol" : "FUSB",
          "dividend" : 0.03,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.45,
          "symbol" : "NSP",
          "dividend" : 0.45,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.11,
          "symbol" : "FMNB",
          "dividend" : 0.11,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.39,
          "symbol" : "FIS",
          "dividend" : 0.39,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.15,
          "symbol" : "FHN",
          "dividend" : 0.15,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 1.34,
          "symbol" : "WILC",
          "dividend" : 1.34,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-16"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.108,
          "symbol" : "G",
          "dividend" : 0.108,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.14,
          "symbol" : "ICFI",
          "dividend" : 0.14,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-13",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.03,
          "symbol" : "IIIN",
          "dividend" : 0.03,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.26,
          "symbol" : "KFRC",
          "dividend" : 0.26,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 1.14,
          "symbol" : "KMB",
          "dividend" : 1.14,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.4,
          "symbol" : "KTB",
          "dividend" : 0.4,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.75,
          "symbol" : "LANC",
          "dividend" : 0.75,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.38,
          "symbol" : "MANT",
          "dividend" : 0.38,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.3,
          "symbol" : "BIG",
          "dividend" : 0.3,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.3,
          "symbol" : "CAI",
          "dividend" : 0.3,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.07,
          "symbol" : "FTV",
          "dividend" : 0.07,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.67,
          "symbol" : "GLPI",
          "dividend" : 0.67,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.27,
          "symbol" : "HRB",
          "dividend" : 0.27,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.415,
          "symbol" : "PPL",
          "dividend" : 0.415,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.25,
          "symbol" : "TCBK",
          "dividend" : 0.25,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.09,
          "symbol" : "UNTY",
          "dividend" : 0.09,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.33,
          "symbol" : "WSBC",
          "dividend" : 0.33,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.5,
          "symbol" : "GOGL",
          "dividend" : 0.5,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.15,
          "symbol" : "HOG",
          "dividend" : 0.15,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.05,
          "symbol" : "DCF",
          "dividend" : 0.05,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.09,
          "symbol" : "EIC",
          "dividend" : 0.09,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-05-13"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.35,
          "symbol" : "UBSI",
          "dividend" : 0.35,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-30"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.111,
          "symbol" : "GFI",
          "dividend" : 0.111,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.507,
          "symbol" : "YY",
          "dividend" : 0.507,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.105,
          "symbol" : "KIO",
          "dividend" : 0.105,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-23"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.7,
          "symbol" : "THG",
          "dividend" : 0.7,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-30"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.002,
          "symbol" : "MGM",
          "dividend" : 0.002,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.54,
          "symbol" : "NDAQ",
          "dividend" : 0.54,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.7,
          "symbol" : "NTRS",
          "dividend" : 0.7,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.01,
          "symbol" : "OXY",
          "dividend" : 0.01,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-15",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.45,
          "symbol" : "BPOP",
          "dividend" : 0.45,
          "recordDate" : "2021-09-10",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-09",
          "label" : "September 09, 21",
          "adjDividend" : 0.23,
          "symbol" : "CRH",
          "dividend" : 0.23,
          "recordDate" : "2021-09-10",
          "paymentDate" : "",
          "declarationDate" : null
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.3,
          "symbol" : "AAT",
          "dividend" : 0.3,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 1.5,
          "symbol" : "SPG",
          "dividend" : 1.5,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.1,
          "symbol" : "STNG",
          "dividend" : 0.1,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.5,
          "symbol" : "RCI_B.TO",
          "dividend" : 0.5,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.03,
          "symbol" : "OBCI",
          "dividend" : 0.03,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-30"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.46,
          "symbol" : "JKHY",
          "dividend" : 0.46,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.38,
          "symbol" : "NRIM",
          "dividend" : 0.38,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.29,
          "symbol" : "CWB.TO",
          "dividend" : 0.29,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 1.0,
          "symbol" : "CTO",
          "dividend" : 1,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.255,
          "symbol" : "PINE",
          "dividend" : 0.255,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.55,
          "symbol" : "NEM",
          "dividend" : 0.55,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.022,
          "symbol" : "DHF",
          "dividend" : 0.022,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.05,
          "symbol" : "CASH",
          "dividend" : 0.05,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.25,
          "symbol" : "HIBB",
          "dividend" : 0.25,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-30"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.115,
          "symbol" : "LGI",
          "dividend" : 0.115,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-22",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.213,
          "symbol" : "MDU",
          "dividend" : 0.213,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.17,
          "symbol" : "KIM",
          "dividend" : 0.17,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.06,
          "symbol" : "INSW",
          "dividend" : 0.06,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.15,
          "symbol" : "EPC",
          "dividend" : 0.15,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-10-05",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 1.0,
          "symbol" : "DHIL",
          "dividend" : 1,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.83,
          "symbol" : "BDX",
          "dividend" : 0.83,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.62,
          "symbol" : "ALV",
          "dividend" : 0.62,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 1.789,
          "symbol" : "PTR",
          "dividend" : 1.789,
          "recordDate" : "2021-09-09",
          "paymentDate" : "",
          "declarationDate" : null
        }, {
          "date" : "2021-09-08",
          "label" : "September 08, 21",
          "adjDividend" : 0.57,
          "symbol" : "TRTN",
          "dividend" : 0.57,
          "recordDate" : "2021-09-09",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.4,
          "symbol" : "TXRH",
          "dividend" : 0.4,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 2.75,
          "symbol" : "TPL",
          "dividend" : 2.75,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.51,
          "symbol" : "PEG",
          "dividend" : 0.51,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.05,
          "symbol" : "PJT",
          "dividend" : 0.05,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-22",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.492,
          "symbol" : "CNI",
          "dividend" : 0.492,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.18,
          "symbol" : "MFI.TO",
          "dividend" : 0.18,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 1.25,
          "symbol" : "LNF.TO",
          "dividend" : 1.25,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-10-08",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.25,
          "symbol" : "KSS",
          "dividend" : 0.25,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-22",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.2663,
          "symbol" : "H.TO",
          "dividend" : 0.2663,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.51,
          "symbol" : "FAF",
          "dividend" : 0.51,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.194,
          "symbol" : "HPQ",
          "dividend" : 0.194,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-10-06",
          "declarationDate" : "2021-06-23"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.29,
          "symbol" : "GBDC",
          "dividend" : 0.29,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 1.0,
          "symbol" : "CI",
          "dividend" : 1,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.35,
          "symbol" : "TIH.TO",
          "dividend" : 0.35,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.55,
          "symbol" : "AEE",
          "dividend" : 0.55,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.117,
          "symbol" : "AMCR",
          "dividend" : 0.117,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.112,
          "symbol" : "GES",
          "dividend" : 0.112,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.12,
          "symbol" : "PDCE",
          "dividend" : 0.12,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-22",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.615,
          "symbol" : "CNR.TO",
          "dividend" : 0.615,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.21,
          "symbol" : "BBDC",
          "dividend" : 0.21,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.2,
          "symbol" : "MOV",
          "dividend" : 0.2,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-22",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-07",
          "label" : "September 07, 21",
          "adjDividend" : 0.0067,
          "symbol" : "DNG.TO",
          "dividend" : 0.0067,
          "recordDate" : "2021-09-08",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.79,
          "symbol" : "SWK",
          "dividend" : 0.79,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.28,
          "symbol" : "QIWI",
          "dividend" : 0.28,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.04,
          "symbol" : "AMKR",
          "dividend" : 0.04,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.2,
          "symbol" : "AIN",
          "dividend" : 0.2,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-10-07",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.32,
          "symbol" : "PWOD",
          "dividend" : 0.32,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.15,
          "symbol" : "FANH",
          "dividend" : 0.15,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.07,
          "symbol" : "PBIP",
          "dividend" : 0.07,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-16"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.1,
          "symbol" : "NFE",
          "dividend" : 0.1,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.03,
          "symbol" : "III",
          "dividend" : 0.03,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.06,
          "symbol" : "HIHO",
          "dividend" : 0.06,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-10-12",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.15,
          "symbol" : "RMRM",
          "dividend" : 0.15,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.27,
          "symbol" : "HWC",
          "dividend" : 0.27,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.14,
          "symbol" : "ESCA",
          "dividend" : 0.14,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-14",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.05,
          "symbol" : "CMG.TO",
          "dividend" : 0.05,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.262,
          "symbol" : "CBSH",
          "dividend" : 0.262,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-23",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 4.13,
          "symbol" : "BLK",
          "dividend" : 4.13,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-22",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.5,
          "symbol" : "UHAL",
          "dividend" : 0.5,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.103,
          "symbol" : "SQFT",
          "dividend" : 0.103,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.03,
          "symbol" : "LOB",
          "dividend" : 0.03,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.218,
          "symbol" : "ASX",
          "dividend" : 0.218,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-10-07",
          "declarationDate" : null
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.25,
          "symbol" : "TPR",
          "dividend" : 0.25,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-08-19"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.24,
          "symbol" : "AVT",
          "dividend" : 0.24,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.39,
          "symbol" : "EFX",
          "dividend" : 0.39,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.82,
          "symbol" : "ANAT",
          "dividend" : 0.82,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.25,
          "symbol" : "UNF",
          "dividend" : 0.25,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-28",
          "declarationDate" : "2021-07-08"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.6,
          "symbol" : "UI",
          "dividend" : 0.6,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.285,
          "symbol" : "ROST",
          "dividend" : 0.285,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.18,
          "symbol" : "SAP.TO",
          "dividend" : 0.18,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.17,
          "symbol" : "TRMT",
          "dividend" : 0.17,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-29",
          "declarationDate" : "2021-08-27"
        }, {
          "date" : "2021-09-03",
          "label" : "September 03, 21",
          "adjDividend" : 0.282,
          "symbol" : "TFSL",
          "dividend" : 0.282,
          "recordDate" : "2021-09-07",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.13,
          "symbol" : "MLI",
          "dividend" : 0.13,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.015,
          "symbol" : "RZZ.TO",
          "dividend" : 0.015,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-07"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.13,
          "symbol" : "FAT",
          "dividend" : 0.13,
          "recordDate" : "2021-09-06",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-26"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.095,
          "symbol" : "TGNA",
          "dividend" : 0.095,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.053,
          "symbol" : "AFB",
          "dividend" : 0.053,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.05,
          "symbol" : "SVBI",
          "dividend" : 0.05,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 7.0,
          "symbol" : "RMR",
          "dividend" : 7,
          "recordDate" : "2021-09-06",
          "paymentDate" : "2021-09-16",
          "declarationDate" : "2021-08-25"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.9,
          "symbol" : "LCII",
          "dividend" : 0.9,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.13,
          "symbol" : "FATBB",
          "dividend" : 0.13,
          "recordDate" : "2021-09-06",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-24"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.18,
          "symbol" : "MLR",
          "dividend" : 0.18,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-13",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.16,
          "symbol" : "MBCN",
          "dividend" : 0.16,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-10"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.204,
          "symbol" : "SQM",
          "dividend" : 0.204,
          "recordDate" : "2021-09-03",
          "paymentDate" : "",
          "declarationDate" : null
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.3,
          "symbol" : "MBWM",
          "dividend" : 0.3,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-20"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.2,
          "symbol" : "OBT",
          "dividend" : 0.2,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 4.0,
          "symbol" : "BBL",
          "dividend" : 4.0,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-21",
          "declarationDate" : null
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 4.0,
          "symbol" : "BHP",
          "dividend" : 4.0,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-21",
          "declarationDate" : null
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.09,
          "symbol" : "LUN.TO",
          "dividend" : 0.09,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 1.06,
          "symbol" : "LIN",
          "dividend" : 1.06,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-07-26"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 1.02,
          "symbol" : "LHX",
          "dividend" : 1.02,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.075,
          "symbol" : "EBIX",
          "dividend" : 0.075,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-23"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.29,
          "symbol" : "FRME",
          "dividend" : 0.29,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-11"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.11,
          "symbol" : "FFNW",
          "dividend" : 0.11,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-16"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.75,
          "symbol" : "FDX",
          "dividend" : 0.75,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.15,
          "symbol" : "UFCS",
          "dividend" : 0.15,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.17,
          "symbol" : "PEBK",
          "dividend" : 0.17,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.21,
          "symbol" : "FLO",
          "dividend" : 0.21,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-20"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.6,
          "symbol" : "STRA",
          "dividend" : 0.6,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-13",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.43,
          "symbol" : "STE",
          "dividend" : 0.43,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.03,
          "symbol" : "SLM",
          "dividend" : 0.03,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.17,
          "symbol" : "RF",
          "dividend" : 0.17,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 1.51,
          "symbol" : "PXD",
          "dividend" : 1.51,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-02"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.24,
          "symbol" : "PRGO",
          "dividend" : 0.24,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.341,
          "symbol" : "TRST",
          "dividend" : 0.341,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.1,
          "symbol" : "ICBK",
          "dividend" : 0.1,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.21,
          "symbol" : "BAC",
          "dividend" : 0.21,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.44,
          "symbol" : "AGR",
          "dividend" : 0.44,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-12"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.48,
          "symbol" : "AJG",
          "dividend" : 0.48,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.26,
          "symbol" : "AROW",
          "dividend" : 0.26,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.27,
          "symbol" : "AMNB",
          "dividend" : 0.27,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-07-21"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.24,
          "symbol" : "AE",
          "dividend" : 0.24,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.575,
          "symbol" : "WM",
          "dividend" : 0.575,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-16"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.59,
          "symbol" : "TT",
          "dividend" : 0.59,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-06-03"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.168,
          "symbol" : "SU",
          "dividend" : 0.168,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.185,
          "symbol" : "SOR",
          "dividend" : 0.185,
          "recordDate" : "2021-09-06",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.398,
          "symbol" : "OTEX",
          "dividend" : 0.398,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.008,
          "symbol" : "HBM",
          "dividend" : 0.008,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.63,
          "symbol" : "D",
          "dividend" : 0.63,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-08-04"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.51,
          "symbol" : "CHRW",
          "dividend" : 0.51,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.179,
          "symbol" : "BF.A",
          "dividend" : 0.179,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.179,
          "symbol" : "BF.B",
          "dividend" : 0.179,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.003,
          "symbol" : "BBD",
          "dividend" : 0.003,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-12",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.002,
          "symbol" : "BBDO",
          "dividend" : 0.002,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-12",
          "declarationDate" : null
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.01,
          "symbol" : "TILE",
          "dividend" : 0.01,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.21,
          "symbol" : "FFIC",
          "dividend" : 0.21,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-18"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.2,
          "symbol" : "SEE",
          "dividend" : 0.2,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-07-12"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.1,
          "symbol" : "KNX",
          "dividend" : 0.1,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-27",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.07,
          "symbol" : "BOTJ",
          "dividend" : 0.07,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-03"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.27,
          "symbol" : "IMO.TO",
          "dividend" : 0.27,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-30"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.01,
          "symbol" : "HBM.TO",
          "dividend" : 0.01,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-09"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.03,
          "symbol" : "GAIN",
          "dividend" : 0.03,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-14"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.12,
          "symbol" : "FNB",
          "dividend" : 0.12,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-14"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.08,
          "symbol" : "EBC",
          "dividend" : 0.08,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.22,
          "symbol" : "CVR",
          "dividend" : 0.22,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-20",
          "declarationDate" : "2021-08-16"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.27,
          "symbol" : "CASS",
          "dividend" : 0.27,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.1795,
          "symbol" : "BF/B",
          "dividend" : 0.1795,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-22"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.1,
          "symbol" : "BRKS",
          "dividend" : 0.1,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.28,
          "symbol" : "BAX",
          "dividend" : 0.28,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-12"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.165,
          "symbol" : "GOLF",
          "dividend" : 0.165,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.2209,
          "symbol" : "OTEX.TO",
          "dividend" : 0.2209,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.37,
          "symbol" : "MYBF",
          "dividend" : 0.37,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-15",
          "declarationDate" : "2021-08-17"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.815,
          "symbol" : "GPC",
          "dividend" : 0.815,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-08-16"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.17,
          "symbol" : "WY",
          "dividend" : 0.17,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-13"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.1,
          "symbol" : "WHG",
          "dividend" : 0.1,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-10-01",
          "declarationDate" : "2021-07-27"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.105,
          "symbol" : "ULH",
          "dividend" : 0.105,
          "recordDate" : "2021-09-06",
          "paymentDate" : "2021-10-04",
          "declarationDate" : "2021-07-29"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.21,
          "symbol" : "SU.TO",
          "dividend" : 0.21,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-24",
          "declarationDate" : "2021-07-28"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.07,
          "symbol" : "PWP",
          "dividend" : 0.07,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-21",
          "declarationDate" : "2021-08-12"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 1.075,
          "symbol" : "PEP",
          "dividend" : 1.075,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-07-15"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.1,
          "symbol" : "OUT",
          "dividend" : 0.1,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-30",
          "declarationDate" : "2021-08-05"
        }, {
          "date" : "2021-09-02",
          "label" : "September 02, 21",
          "adjDividend" : 0.16,
          "symbol" : "NAVI",
          "dividend" : 0.16,
          "recordDate" : "2021-09-03",
          "paymentDate" : "2021-09-17",
          "declarationDate" : "2021-08-11"
        } ]
  recorded_at: Thu, 02 Sep 2021 15:09:46 GMT
- request:
    method: get
    uri: https://financialmodelingprep.com/api/v3/profile/RPT,FGBI,DTM,DTE,JJSF,CJT.TO,WHF,SYBT,MRTN,NEO.TO,NJR,NEWT,AVNT,ARD,AIMC,ALEX,ALRS,TPB,ALB,AAP,GEF,TG,SHOO,RBCAA,ROIC,QCRH,HBAN,HRZN,VRS,HRC,UNIT,FISI,EXP,CSU.TO,CHMG,CNQ.TO,OLED,SYY,MCY,MPW,MAL.TO,ITP.TO,XTC.TO,ESSA,CINF,ADT,CCL-B.TO,OPP,TCPC,ARES,AIG,RMI,AGI.TO,RFMZ,RMM,RSF,RIV,RFM,PGZ,OXLC,MEOH,GDL,GNT,GUT,GRX,GGZ,GDV,GAB,FNV,AGI,OXSQ,NMFC,MX.TO,ICE,GWRS,NX,RYN,HI,HCA,FNV.TO,FFIN,FCAP,FNF,RNST,VST,WU,UTMD,AAN,HLNE,GILD,GRMN,WN.TO,GORO,HUN,IBP,MRK,MRC.TO,MSI,NSA,NEN,NEU,NWSA,NREF,NXRT,NWE,NXPI,OCSL,ORI,OVV,OMI,PKG,PXT.TO,PSI.TO,APTS,PB,PSB,PSA,REG,RNR,SBCF,SCI,SFL,SJR-B.TO,SFNC,TSLX,SAH,STFC,SMMF,TROW,TECK-B.TO,TDS,LEG,KBR,IRM,IPAR,IFC.TO,UGI,TNL,CSWC,CPK,KO,CMA,RNW.TO,TPZ.TO,TMO,ATRI,VIACA,TECK,SJR,NWS,MMD,GTN.A,DPG,CPG,RQI,UTF,RNP,PTA,CVE,PSF,LDP,FOF,RA,BCE,WH,WOR,WWE,WGO,VIAC,VRSK,VGR,VLY,HRTG,XEL,BXS,SPTN,COFS,HWBK,BCEI,BR,CFFI,NET-UN.TO,CVE.TO,CBU,CTBI,CNMD,CSW-A.TO,CJR-B.TO,CPG.TO,CCI,CSGS,DLR,DPZ,DRM.TO,EMN,ECN.TO,EVT.TO,ESBA,ESRT,EFSC,EVC,EQB.TO,EXR,AGM,FCRD,FSK,GATX,MBIN,MRD.TO,MKP.TO,MAXR,M,L.TO,LDOS,GECC,GTN,GPK,WJX.TO,WRB,UE,UCBI,MO,AMH,ARCC,ARR,BANC,BOCH,BCE.TO,BDC,BRY,BKCC,ECL,EDI,EDF,EOD,SOI,SAR,NBLY.TO,GBL,FDUS,EVBN,AME,BBY,BAMR,CWH,BAP,GROW,UNH,SPR,KSU,JRVR,ITT,DVN,RRBI,OCCI,TBLD,VGI,ZTR,CCBG,CATO,GPN,AL,AMSF,ANTM,AUBN,ADP,BSIG,CTXS,CME,CNO,CMP,ENS,EXPO,QTRH.TO,SNDR,SAMG,SJI,SR,STXB,T.TO,TXT,TRV,UMBF,UBCP,UWMC,VFC,VCTR,VSH,WMB,JOAN,DKS,CRWS,ECC,TU,CAL,FUSB,NSP,FMNB,FIS,FHN,WILC,G,ICFI,IIIN,KFRC,KMB,KTB,LANC,MANT,BIG,CAI,FTV,GLPI,HRB,PPL,TCBK,UNTY,WSBC,GOGL,HOG,DCF,EIC,UBSI,GFI,YY,KIO,THG,MGM,NDAQ,NTRS,OXY,BPOP,CRH,AAT,SPG,STNG,RCI-B.TO,OBCI,JKHY,NRIM,CWB.TO,CTO,PINE,NEM,DHF,CASH,HIBB,LGI,MDU,KIM,INSW,EPC,DHIL,BDX,ALV,PTR,TRTN,TXRH,TPL,PEG,PJT,CNI,MFI.TO,LNF.TO,KSS,H.TO,FAF,HPQ,GBDC,CI,TIH.TO,AEE,AMCR,GES,PDCE,CNR.TO,BBDC,MOV,DNG.TO,SWK,QIWI,AMKR,AIN,PWOD,FANH,PBIP,NFE,III,HIHO,RMRM,HWC,ESCA,CMG.TO,CBSH,BLK,UHAL,SQFT,LOB,ASX,TPR,AVT,EFX,ANAT,UNF,UI,ROST,SAP.TO,TRMT,TFSL,MLI,RZZ.TO,FAT,TGNA,AFB,SVBI,RMR,LCII,FATBB,MLR,MBCN,SQM,MBWM,OBT,BBL,BHP,LUN.TO,LIN,LHX,EBIX,FRME,FFNW,FDX,UFCS,PEBK,FLO,STRA,STE,SLM,RF,PXD,PRGO,TRST,ICBK,BAC,AGR,AJG,AROW,AMNB,AE,WM,TT,SU,SOR,OTEX,HBM,D,CHRW,BF.A,BF.B,BBD,BBDO,TILE,FFIC,SEE,KNX,BOTJ,IMO.TO,HBM.TO,GAIN,FNB,EBC,CVR,CASS,BF-B,BRKS,BAX,GOLF,OTEX.TO,MYBF,GPC,WY,WHG,ULH,SU.TO,PWP,PEP,OUT,NAVI?apikey=<FMP_API_KEY>
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - financialmodelingprep.com
      Upgrade-Insecure-Requests:
      - '1'
  response:
    status:
      code: 200
      message: ''
    headers:
      Server:
      - nginx/1.14.0 (Ubuntu)
      Date:
      - Thu, 02 Sep 2021 15:09:47 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, OPTIONS
      Access-Control-Max-Age:
      - '3600'
      Access-Control-Allow-Headers:
      - origin, content-type, accept, Authorization, authorization
      Content-Disposition:
      - inline;filename=f.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Sep 2021 15:09:48 GMT
recorded_with: VCR 6.0.0
